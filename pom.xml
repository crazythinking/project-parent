<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.spring.platform</groupId>
		<artifactId>platform-bom</artifactId>
		<version>Brussels-SR2</version>
		<relativePath />
	</parent>

	<groupId>net.engining.project</groupId>
	<artifactId>project-parent</artifactId>
	<!-- 版本号用两个数字编，这样可以避免与任何产品相同而报warning，同时对于这样的纯parent项目来说，太细的版本号也没有意义 -->
	<version>3.2-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>依赖项管理框架</name>
	<description>
		将大部分通用的依赖项管理和常用配置集中在单独artifact管理，以统一PG、各产品以及实施项目的POM管理。
	</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jdk.version>1.8</jdk.version>

		<!-- fast json -->
		<fastjson.version>1.2.46</fastjson.version>
		
		<!-- drools -->
		<drools.version>5.6.0.Final</drools.version>

		<!-- jasreport -->
		<jasper.reports.version>5.5.1</jasper.reports.version>

		<!-- mina -->
		<mina.core.version>2.0.7</mina.core.version>
		<mina.integration.spring.version>1.1.7</mina.integration.spring.version>

		<!-- maven -->
		<maven.plugin.api.version>2.2.1</maven.plugin.api.version>
		<maven.project.version>2.2.1</maven.project.version>
		<aspectj.maven.plugin.version>1.10</aspectj.maven.plugin.version>
		<apt-maven-plugin.version>1.1.3</apt-maven-plugin.version>

		<!-- apache commons -->
		<commons.daemon.version>1.0.10</commons.daemon.version>
		<commons.net.version>3.2</commons.net.version>
		<commons.fileupload.version>1.3.2</commons.fileupload.version>
		<commons.codec.version>1.7</commons.codec.version>
		<commons-email.version>1.3.2</commons-email.version>

		<ibator.version>1.2.1.681</ibator.version>

		<!-- LMAX -->
		<disruptor.version>3.3.5</disruptor.version>

		<!-- 测试相关 -->
		<easymock.version>3.0</easymock.version>
	</properties>

	<!-- <scm>
		<connection>scm:http://101.132.40.129/svn/repositories/smartstar/branches/project-3.2-SNAPSHOT</connection>
		<developerConnection>scm:http://101.132.40.129/svn/repositories/smartstar/branches/project-3.2-SNAPSHOT</developerConnection>
	</scm> -->
	<!-- <issueManagement> <system>Mantis</system> <url>http://repo/mantis</url> </issueManagement> <ciManagement> <system>Jenkins</system> <url>http://repo/jenkins</url> 
		</ciManagement> -->

	<profiles>
		<profile>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<id>repo</id>
			<distributionManagement>
				<snapshotRepository>
					<id>repo</id>
					<!-- <url>http://172.28.0.124:8081/nexus/content/repositories/snapshots</url> -->
					<!-- <url>http://118.242.36.102:6474/nexus/content/repositories/snapshots</url> -->
					<url>https://dev.aceistar.com:18081/nexus/content/repositories/snapshots</url>
				</snapshotRepository>
				<repository>
					<id>repo</id>
					<!-- <url>http://172.28.0.124:8081/nexus/content/repositories/releases</url> -->
					<!-- <url>http://118.242.36.102:6474/nexus/content/repositories/releases</url> -->
					<url>https://dev.aceistar.com:18081/nexus/content/repositories/releases</url>
				</repository>
			</distributionManagement>
		</profile>
		<!-- 支持混淆的Profile，不生成source -->
		<!-- <profile>
			<id>obfuscated</id>
			<distributionManagement>
				<snapshotRepository>
					<id>repo</id>
					<url>http://dev.aceistar.com:18081/nexus/content/repositories/outter-snapshots</url>
				</snapshotRepository>
				<repository>
					<id>repo</id>
					<url>http://dev.aceistar.com:18081/nexus/content/repositories/outter-releases</url>
				</repository>
			</distributionManagement>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<artifactId>maven-source-plugin</artifactId>
							<configuration>
								<skipSource>true</skipSource>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile> -->
	</profiles>

	<dependencyManagement>
		<!-- 这里是所有子项目使用的依赖项的一个全集，用于在这里统一定义版本，子项目里不需要再指定 -->
		<!-- 为避免循环，这里不包含PG的版本管理 -->
		<dependencies>

			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>${fastjson.version}</version>
			</dependency>

			<!-- JasperReports -->
			<dependency>
				<groupId>net.sf.jasperreports</groupId>
				<artifactId>jasperreports</artifactId>
				<version>${jasper.reports.version}</version>
				<exclusions>
					<!-- 这里的commons-collections 2.1会与hibernate冲突，等某天它改为3后再说 -->
					<exclusion>
						<artifactId>commons-collections</artifactId>
						<groupId>commons-collections</groupId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- Drools 相关 -->
			<dependency>
				<groupId>org.drools</groupId>
				<artifactId>drools-spring</artifactId>
				<version>${drools.version}</version>
			</dependency>
			<dependency>
				<groupId>org.drools</groupId>
				<artifactId>drools-core</artifactId>
				<version>${drools.version}</version>
			</dependency>

			<!-- MINA -->
			<dependency>
				<groupId>org.apache.mina</groupId>
				<artifactId>mina-core</artifactId>
				<version>${mina.core.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.mina</groupId>
				<artifactId>mina-integration-spring</artifactId>
				<version>${mina.integration.spring.version}</version>
			</dependency>

			<!-- apache commons 库 -->
			<dependency>
				<groupId>commons-net</groupId>
				<artifactId>commons-net</artifactId>
				<version>${commons.net.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-fileupload</groupId>
				<artifactId>commons-fileupload</artifactId>
				<version>${commons.fileupload.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>${commons.codec.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-email</artifactId>
				<version>${commons-email.version}</version>
			</dependency>
			<!-- service daemon -->
			<dependency>
				<groupId>commons-daemon</groupId>
				<artifactId>commons-daemon</artifactId>
				<version>${commons.daemon.version}</version>
			</dependency>

			<!-- 其它特定功能库 -->
			<dependency>
				<groupId>org.apache.ibatis</groupId>
				<artifactId>ibator</artifactId>
				<version>${ibator.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- 所有的项目都要用到的依赖项 -->
	<dependencies>

		<!-- SLF4J -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>

		<!--TODO 需要重新整理，是否spring-boot-starter-log4j2代替以下配置 log4j -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<dependency><!-- 桥接：告诉Slf4j使用Log4j2 -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>
		<dependency> <!-- 桥接：告诉commons logging使用Log4j2 -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jcl</artifactId>
		</dependency>
		<dependency> <!-- 桥接：告诉jdk-logging使用Log4j2 -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jul</artifactId>
		</dependency>
		<dependency><!--web工程需要包含log4j-web，非web工程不需要 -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
		</dependency>
		<dependency><!--需要使用log4j2的AsyncLogger需要包含disruptor -->
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>${disruptor.version}</version>
		</dependency>

		<!--TODO 需要重新整理，是否spring-boot-starter-test代替以下配置 测试相关 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>${easymock.version}</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
		</dependency>

		<!--TODO 需要重新整理，是否spring-boot-starter-aop AspectJ代替以下配置 基本上都会用到AspectJ，这里统一依赖-->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjtools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>

	</dependencies>
	<build>
		<resources>
			<!-- 由于gwt-maven-plugin:resources的bug，现在*.properties还需要通过这样的配置来放进去 -->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<!-- Spring Boot’s Maven Plugin -->
				<!-- <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<argLine>-Xmx1024m -XX:MaxPermSize=128m</argLine>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>${jdk.version}</source>
						<target>${jdk.version}</target>
						<showDeprecation>true</showDeprecation>
						<showWarnings>true</showWarnings>
					</configuration>
				</plugin>
				<plugin>
					<!-- AspectJ的统一配置 -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>aspectj-maven-plugin</artifactId>
					<version>${aspectj.maven.plugin.version}</version>
					<dependencies><!-- 1.10 默认依赖1.8.9的aspectj，这里升级到1.8.10，与spring保持一致 -->
						<dependency>
							<groupId>org.aspectj</groupId>
							<artifactId>aspectjrt</artifactId>
							<version>${aspectj.version}</version>
						</dependency>
						<dependency>
							<groupId>org.aspectj</groupId>
							<artifactId>aspectjtools</artifactId>
							<version>${aspectj.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<verbose>true</verbose><!-- Emit messages about accessed/processed compilation units -->
						<privateScope>true</privateScope><!-- Shows all classes and members. -->
						<showWeaveInfo>true</showWeaveInfo><!-- Emit messages about weaving -->
						<aspectLibraries>
							<aspectLibrary><!-- 这里与spring-aspects配合使用；项目中springJPA事务管理就是使用Spring + AspectJ Annotation进行编译时Weave -->
								<groupId>org.springframework</groupId>
								<artifactId>spring-aspects</artifactId>
							</aspectLibrary>
						</aspectLibraries>
						<outxml>true</outxml><!-- Generate aop.xml file for load-time weaving with default name (/META-INF/aop.xml). -->
						<complianceLevel>${jdk.version}</complianceLevel>
						<source>${jdk.version}</source>
						<target>${jdk.version}</target>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal><!-- use this goal to weave all your main classes -->
								<goal>test-compile</goal><!-- use this goal to weave all your test classes -->
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>com.mysema.maven</groupId>
					<artifactId>apt-maven-plugin</artifactId>
					<version>${apt-maven-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>com.querydsl</groupId>
							<artifactId>querydsl-apt</artifactId>
							<version>${querydsl.version}</version>
						</dependency>
						<dependency>
							<groupId>com.querydsl</groupId>
							<artifactId>querydsl-jpa</artifactId>
							<classifier>apt</classifier>
							<version>${querydsl.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
				</plugin>
				<plugin><!-- TODO 需要配合maven的setting.xml配置相应的 env.svnUser，env.svnPass；另还需要本地支持svn命令行，以及配合mvn release; -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<configuration>
						<tagNameFormat>@{project.version}</tagNameFormat>
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<updateBranchVersions>true</updateBranchVersions>
						<updateVersionsToSnapshot>true</updateVersionsToSnapshot>
						<updateWorkingCopyVersions>false</updateWorkingCopyVersions>
						<username>${env.svnUser}</username>
						<password>${env.svnPass}</password>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
						<configuration>
							<excludeResources>true</excludeResources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
